<% layout('layouts/index') %>
<main>
  <div class="bg-white border rounded-4 shadow-sm">
    <div class="p-3 border-bottom d-flex justify-content-between align-items-center">
      <h4>Quản lý tài khoản</h4>
    </div>

    <div class="p-3">
      <section class="mb-4">
        <table class="table table-striped table-hover myTable table-light">
          <thead>
            <tr>
              <th>STT</th>
              <th>Tên đăng nhập</th>
              <th>Email</th>
              <th>Chi tiết</th>
              <th>Xóa</th>
            </tr>
          </thead>
          <tbody id="userTableBody">
            <!-- Dữ liệu sẽ được load bằng JS -->
          </tbody>
        </table>
      </section>
    </div>
  </div>
</main>

<!-- Modal Chi Tiết Tài Khoản -->
<div class="modal fade" id="detailAccountModal" tabindex="-1" aria-labelledby="detailAccountModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form id="detailAccountForm" class="modal-content" novalidate>
      <div class="modal-header">
        <h5 class="modal-title" id="detailAccountModalLabel">Chi tiết tài khoản</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="detailUserId" />
        <div class="mb-3">
          <label for="detailUsername" class="form-label">Tên đăng nhập</label>
          <input type="text" class="form-control" id="detailUsername" disabled />
        </div>
        <div class="mb-3">
          <label for="detailEmail" class="form-label">Email</label>
          <input type="email" class="form-control" id="detailEmail" required />
        </div>
        <div class="mb-3">
          <label for="detailFullName" class="form-label">Họ tên</label>
          <input type="text" class="form-control" id="detailFullName" />
        </div>
        <div class="mb-3">
          <label for="detailPhone" class="form-label">Số điện thoại</label>
          <input type="text" class="form-control" id="detailPhone" />
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
      </div>
    </form>
  </div>
</div>

<script>
  let accounts = [];

  function fetchUsers() {
    fetch("http://localhost:8000/api/admin/get-all-users", {
      method: "GET",
      credentials: "include"
    })
      .then(async res => {
        if (res.status === 401) {
          alert("Phiên đăng nhập đã hết hạn hoặc token không hợp lệ.");
          window.location.href = "/";
          throw new Error("Unauthorized");
        }
        if (!res.ok) {
          const text = await res.text();
          throw new Error("Lỗi tải danh sách: " + res.status + " - " + text);
        }
        return res.json();
      })
      .then(data => {
        accounts = Array.isArray(data.rows) ? data.rows : [];
        renderTable();
      })
      .catch(err => {
        console.error(err);
        alert("Lỗi khi tải danh sách tài khoản: " + err.message);
      });
  }

  function renderTable() {
    const tbody = document.getElementById('userTableBody');
    tbody.innerHTML = '';

    if (accounts.length === 0) {
      tbody.innerHTML = '<tr><td colspan="5" class="text-center">Không có tài khoản nào</td></tr>';
      return;
    }

    accounts.forEach((acc, i) => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${i + 1}</td>
        <td>${acc.username || ''}</td>
        <td>${acc.email || ''}</td>
        <td><button type="button" class="btn btn-primary btn-sm" onclick="showDetailModal(${acc.user_id})">Chi tiết</button></td>
        <td><button type="button" class="btn btn-danger btn-sm" onclick="deleteUser(${acc.user_id})">Xóa</button></td>
      `;
      tbody.appendChild(tr);
    });
  }

  function showDetailModal(userId) {
    const acc = accounts.find(u => u.user_id === userId);
    if (!acc) return alert("Không tìm thấy tài khoản!");

    document.getElementById('detailUserId').value = acc.user_id;
    document.getElementById('detailUsername').value = acc.username || '';
    document.getElementById('detailEmail').value = acc.email || '';
    document.getElementById('detailFullName').value = acc.full_name || '';
    document.getElementById('detailPhone').value = acc.phone || '';

    const modalEl = document.getElementById('detailAccountModal');
    const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
    modal.show();
  }

  function updateUser() {
    const userId = document.getElementById('detailUserId').value;
    const body = {
      email: document.getElementById('detailEmail').value.trim(),
      full_name: document.getElementById('detailFullName').value.trim(),
      phone: document.getElementById('detailPhone').value.trim()
    };

    fetch(`http://localhost:8000/api/admin/update-user/${userId}`, {
      method: 'PUT',
      headers: { "Content-Type": "application/json" },
      credentials: "include",
      body: JSON.stringify(body)
    })
      .then(async res => {
        if (res.status === 401) {
          alert("Phiên đăng nhập đã hết hạn hoặc token không hợp lệ.");
          window.location.href = "/";
          throw new Error("Unauthorized");
        }
        if (!res.ok) {
          const text = await res.text();
          throw new Error("Lỗi cập nhật: " + res.status + " - " + text);
        }
        return res.json();
      })
      .then(() => {
        alert("Cập nhật thành công!");
        const modalEl = document.getElementById('detailAccountModal');
        bootstrap.Modal.getInstance(modalEl).hide();
        fetchUsers();
      })
      .catch(err => {
        console.error(err);
        alert("Lỗi khi cập nhật tài khoản: " + err.message);
      });
  }

  function deleteUser(userId) {
    if (!confirm("Bạn có chắc chắn muốn xoá tài khoản này?")) return;

    fetch(`http://localhost:8000/api/admin/delete-user/${userId}`, {
      method: 'DELETE',
      credentials: "include"
    })
      .then(async res => {
        if (res.status === 401) {
          alert("Phiên đăng nhập đã hết hạn hoặc token không hợp lệ.");
          window.location.href = "/";
          throw new Error("Unauthorized");
        }
        if (!res.ok) {
          const text = await res.text();
          throw new Error("Lỗi xoá: " + res.status + " - " + text);
        }
        return res.json();
      })
      .then(() => {
        alert("Xóa tài khoản thành công!");
        fetchUsers();
      })
      .catch(err => {
        console.error(err);
        alert("Lỗi khi xoá tài khoản: " + err.message);
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    fetchUsers();
    document.getElementById("detailAccountForm").addEventListener("submit", e => {
      e.preventDefault();
      updateUser();
    });
  });
</script>
