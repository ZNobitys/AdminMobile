<% layout('layouts/index') %>
<main>
  <div class="bg-white border rounded-4 shadow-sm mx-auto">
    <div class="p-4 border-bottom d-flex justify-content-between align-items-center">
      <h4>Quản lý Topic</h4>
      <button id="showAddTopicModalBtn" class="btn btn-success">Thêm mới</button>
    </div>

    <section class="p-3">
      <div class="table-responsive">
        <table class="table table-striped table-hover align-middle">
          <thead class="table-light align-middle">
            <tr>
              <th style="width: 5%;">STT</th>
              <th style="width: 10%;" >Tên Skill</th>
              <th style="width: 10%;">Tên Topic</th>
              <th>Slug</th>
              <th>Mô tả</th>
              <th class="text-center" style="width: 10%;">Ảnh</th>
              <th class="text-center" >Chi tiết</th>
              <th class="text-center">Sửa</th>
              <th class="text-center">Xóa</th>
            </tr>
          </thead>
          <tbody id="topicTableBody"></tbody>
        </table>
      </div>
    </section>
  </div>
</main>

<!-- Modal Thêm -->
<div class="modal fade" id="addTopicModal" tabindex="-1" aria-labelledby="addTopicModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <form id="addTopicForm" class="modal-content shadow">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title">Thêm Topic mới</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <!-- Form Thêm -->
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Tên Skill</label>
            <select class="form-select" id="newSkillName" required>
              <option value="" disabled selected>Chọn Skill</option>
            </select>
          </div>
          <div class="col-md-6">
            <label class="form-label">Tên Topic</label>
            <input type="text" class="form-control" id="newTopicName" required />
          </div>
        </div>
        <div class="mt-3">
          <label class="form-label">Slug</label>
          <input type="text" class="form-control" id="newSlug" required />
        </div>
        <div class="mt-3">
          <label class="form-label">Mô tả</label>
          <textarea class="form-control" id="newDescription" rows="3" required></textarea>
        </div>
        <div class="mt-3">
          <label class="form-label">URL Ảnh</label>
          <input type="url" class="form-control" id="newImageUrl" />
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-success px-4">Thêm</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal Sửa -->
<div class="modal fade" id="editTopicModal" tabindex="-1">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <form id="editTopicForm" class="modal-content shadow">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title">Sửa Topic</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input type="hidden" id="editTopicId" />
        <div class="row g-3">
          <div class="col-md-6">
            <label class="form-label">Tên Skill</label>
            <select class="form-select" id="editSkillName" required></select>
          </div>
          <div class="col-md-6">
            <label class="form-label">Tên Topic</label>
            <input type="text" class="form-control" id="editTopicName" required />
          </div>
        </div>
        <div class="mt-3">
          <label class="form-label">Slug</label>
          <input type="text" class="form-control" id="editSlug" required />
        </div>
        <div class="mt-3">
          <label class="form-label">Mô tả</label>
          <textarea class="form-control" id="editDescription" rows="3" required></textarea>
        </div>
        <div class="mt-3">
          <label class="form-label">URL Ảnh</label>
          <input type="url" class="form-control" id="editImageUrl" />
        </div>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-primary px-4">Lưu</button>
      </div>
    </form>
  </div>
</div>

<script>
  let topics = [], skills = [];

  document.addEventListener('DOMContentLoaded', () => {
    bindEvents();
    fetchSkills().then(fetchTopics);
  });

  function bindEvents() {
    document.getElementById('showAddTopicModalBtn').addEventListener('click', () => {
      bootstrap.Modal.getOrCreateInstance(document.getElementById('addTopicModal')).show();
    });

    document.getElementById('addTopicForm').addEventListener('submit', e => {
      e.preventDefault();
      handleAddTopic();
    });

    document.getElementById('editTopicForm').addEventListener('submit', e => {
      e.preventDefault();
      handleUpdateTopic();
    });
  }

  async function fetchSkills() {
    try {
      const res = await fetch('http://localhost:8000/api/skills/get-all-skill', { credentials: 'include' });
      const data = await res.json();
      skills = data.skills || data;

      const addSelect = document.getElementById('newSkillName');
      const editSelect = document.getElementById('editSkillName');

      addSelect.innerHTML = `<option value="" disabled selected>Chọn Skill</option>`;
      editSelect.innerHTML = `<option value="" disabled>Chọn Skill</option>`;

      skills.forEach(skill => {
        const opt = new Option(skill.name, skill.skill_id);
        addSelect.add(opt.cloneNode(true));
        editSelect.add(opt.cloneNode(true));
      });
    } catch {
      alert('Lỗi khi tải danh sách skill');
    }
  }

  async function fetchTopics() {
    try {
      const res = await fetch('http://localhost:8000/api/topics/get-all-topics', { credentials: 'include' });
      const data = await res.json();
      topics = data.topics || data;
      renderTable();
    } catch {
      alert('Lỗi tải danh sách topic');
    }
  }

  function escapeHtml(text) {
    return text?.replace(/[&<>"']/g, m => ({
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    })[m]) || '';
  }

  function renderTable() {
    const tbody = document.getElementById('topicTableBody');
    tbody.innerHTML = topics.length ? topics.map((t, i) => {
      const skillName = skills.find(s => s.skill_id === t.skill_id)?.name || '(Không rõ skill)';
      return `
        <tr>
          <td>${i + 1}</td>
          <td>${escapeHtml(skillName)}</td>
          <td>${escapeHtml(t.name)}</td>
          <td>${escapeHtml(t.slug)}</td>
          <td>${escapeHtml(t.description)}</td>
          <td class="text-center">
            ${t.image_url ? `<img src="${t.image_url}" style="width:80px;height:80px;object-fit:cover;border-radius:8px;border:1px solid #ccc;" />` : '<span class="text-muted">Không có ảnh</span>'}
          </td>
          <td class="text-center">
            <a class="btn btn-info btn-sm" href="/details-topic?id=${t.topic_id}">Chi tiết</a>
          </td>
          <td class="text-center">
            <button class="btn btn-primary btn-sm" onclick="showEditModal(${t.topic_id})">Sửa</button>
          </td>
          <td class="text-center">
            <button class="btn btn-danger btn-sm" onclick="handleDeleteTopic(${t.topic_id})">Xoá</button>
          </td>
        </tr>`;
    }).join('') : `<tr><td colspan="9" class="text-center text-muted fst-italic">Chưa có dữ liệu Topic</td></tr>`;
  }

  function showEditModal(id) {
    const topic = topics.find(t => t.topic_id === id);
    if (!topic) return alert('Không tìm thấy topic');
    document.getElementById('editTopicId').value = topic.topic_id;
    document.getElementById('editTopicName').value = topic.name;
    document.getElementById('editSlug').value = topic.slug;
    document.getElementById('editDescription').value = topic.description || '';
    document.getElementById('editImageUrl').value = topic.image_url || '';
    document.getElementById('editSkillName').value = topic.skill_id || '';
    bootstrap.Modal.getOrCreateInstance(document.getElementById('editTopicModal')).show();
  }

  async function handleAddTopic() {
    const data = {
      skill_id: document.getElementById('newSkillName').value,
      name: document.getElementById('newTopicName').value.trim(),
      slug: document.getElementById('newSlug').value.trim(),
      description: document.getElementById('newDescription').value.trim(),
      image_url: document.getElementById('newImageUrl').value.trim(),
    };
    if (!data.skill_id || !data.name || !data.slug) return alert('Vui lòng nhập đầy đủ');

    try {
      const res = await fetch('http://localhost:8000/api/topics/create-topic', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(data),
      });
      const result = await res.json();
      if (res.ok) {
        alert('Thêm thành công');
        bootstrap.Modal.getInstance(document.getElementById('addTopicModal')).hide();
        document.getElementById('addTopicForm').reset();
        fetchTopics();
      } else alert(result.message || 'Lỗi khi thêm');
    } catch {
      alert('Lỗi khi thêm Topic');
    }
  }

  async function handleUpdateTopic() {
    const id = document.getElementById('editTopicId').value;
    const data = {
      topic_id: id,
      skill_id: document.getElementById('editSkillName').value,
      name: document.getElementById('editTopicName').value.trim(),
      slug: document.getElementById('editSlug').value.trim(),
      description: document.getElementById('editDescription').value.trim(),
      image_url: document.getElementById('editImageUrl').value.trim(),
    };
    if (!data.topic_id || !data.skill_id || !data.name || !data.slug) return alert('Vui lòng nhập đầy đủ');

    try {
      const res = await fetch(`http://localhost:8000/api/topics/update-topic/${id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        body: JSON.stringify(data),
      });
      const result = await res.json();
      if (res.ok) {
        alert('Cập nhật thành công');
        bootstrap.Modal.getInstance(document.getElementById('editTopicModal')).hide();
        fetchTopics();
      } else alert(result.message || 'Lỗi cập nhật');
    } catch {
      alert('Lỗi cập nhật Topic');
    }
  }

  async function handleDeleteTopic(id) {
    if (!confirm('Bạn có chắc muốn xóa?')) return;
    try {
      const res = await fetch(`http://localhost:8000/api/topics/delete-topic/${id}`, {
        method: 'DELETE',
        credentials: 'include',
      });
      const result = await res.json();
      if (res.ok) {
        alert('Xóa thành công');
        fetchTopics();
      } else alert(result.message || 'Lỗi khi xóa');
    } catch {
      alert('Lỗi khi xóa Topic');
    }
  }
</script>
